import { useEffect, useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { useLanguage } from '@/hooks/use-language';
import { useSpeech } from '@/hooks/use-speech';
import { useToast } from '@/hooks/use-toast';
import { AlertTriangle, CreditCard } from 'lucide-react';
import type { CreditTracker } from '@shared/schema';

export function CreditTrackerComponent() {
  const { language } = useLanguage();
  const { speak, isSupported } = useSpeech();
  const { toast } = useToast();
  const [hasShownAlert, setHasShownAlert] = useState(false);

  const { data: creditData, isLoading } = useQuery<CreditTracker>({
    queryKey: ['/api/credit-tracker'],
    refetchInterval: 30000, // Refetch every 30 seconds
  });

  // Fallback to localStorage if offline
  const [localCreditData, setLocalCreditData] = useState<CreditTracker | null>(null);

  useEffect(() => {
    if (creditData) {
      // Save to localStorage for offline access
      localStorage.setItem('creditTracker', JSON.stringify(creditData));
      setLocalCreditData(creditData);
    } else {
      // Load from localStorage if data is not available
      const storedData = localStorage.getItem('creditTracker');
      if (storedData) {
        setLocalCreditData(JSON.parse(storedData));
      }
    }
  }, [creditData]);

  const activeData = creditData || localCreditData;

  useEffect(() => {
    if (activeData && !hasShownAlert) {
      const creditLimit = parseFloat(activeData.creditLimit);
      const creditUsed = parseFloat(activeData.creditUsed);
      const usagePercentage = (creditUsed / creditLimit) * 100;

      // Show alert when over 80% of credit is used
      if (usagePercentage >= 80) {
        setHasShownAlert(true);
        
        const alertMessage = language === 'hi' 
          ? `‡§Ü‡§™ ‚Çπ${creditUsed.toFixed(0)} ‡§§‡§ï ‡§™‡§π‡•Å‡§Ç‡§ö ‡§ó‡§è ‡§π‡•ã, ‡§∏‡§Ç‡§≠‡§æ‡§≤ ‡§ï‡•á!`
          : language === 'bn'
          ? `‡¶Ü‡¶™‡¶®‡¶ø ‚Çπ${creditUsed.toFixed(0)} ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶™‡ßå‡¶Å‡¶õ‡ßá ‡¶ó‡ßá‡¶õ‡ßá‡¶®, ‡¶∏‡¶æ‡¶¨‡¶ß‡¶æ‡¶®!`
          : language === 'mr'
          ? `‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‚Çπ${creditUsed.toFixed(0)} ‡§™‡§∞‡•ç‡§Ø‡§Ç‡§§ ‡§™‡•ã‡§π‡•ã‡§ö‡§≤‡§æ ‡§Ü‡§π‡§æ‡§§, ‡§∏‡§æ‡§µ‡§ß ‡§∞‡§æ‡§π‡§æ!`
          : language === 'ta'
          ? `‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‚Çπ${creditUsed.toFixed(0)} ‡Æµ‡Æ∞‡Øà ‡Æö‡ØÜ‡Æ©‡Øç‡Æ±‡ØÅ‡Æµ‡Æø‡Æü‡Øç‡Æü‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç, ‡Æï‡Æµ‡Æ©‡ÆÆ‡Ææ‡Æï ‡Æá‡Æ∞‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç!`
          : language === 'te'
          ? `‡∞Æ‡±Ä‡∞∞‡±Å ‚Çπ${creditUsed.toFixed(0)} ‡∞µ‡∞∞‡∞ï‡±Å ‡∞ö‡±á‡∞∞‡±Å‡∞ï‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞∞‡±Å, ‡∞ú‡∞æ‡∞ó‡±ç‡∞∞‡∞§‡±ç‡∞§‡∞ó‡∞æ ‡∞â‡∞Ç‡∞°‡∞Ç‡∞°‡∞ø!`
          : `You've reached ‚Çπ${creditUsed.toFixed(0)}, be careful!`;

        toast({
          title: 'üîî ' + (language === 'hi' ? '‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä' : 'Alert'),
          description: alertMessage,
          variant: 'destructive',
          duration: 5000,
        });

        // Voice alert
        if (isSupported) {
          speak(alertMessage);
        }

        // Reset alert flag after 1 hour
        setTimeout(() => setHasShownAlert(false), 3600000);
      }
    }
  }, [activeData, hasShownAlert, language, toast, speak, isSupported]);

  if (isLoading && !localCreditData) {
    return (
      <Card className="border-blue-200 bg-blue-50">
        <CardContent className="p-4">
          <div className="animate-pulse">
            <div className="h-4 bg-blue-200 rounded mb-2"></div>
            <div className="h-8 bg-blue-200 rounded"></div>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (!activeData) {
    return (
      <Card className="border-gray-200">
        <CardContent className="p-4">
          <p className="text-gray-500 text-center">
            {language === 'hi' ? '‡§â‡§ß‡§æ‡§∞ ‡§°‡•á‡§ü‡§æ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç' : 'Credit data not available'}
          </p>
        </CardContent>
      </Card>
    );
  }

  const creditLimit = parseFloat(activeData.creditLimit);
  const creditUsed = parseFloat(activeData.creditUsed);
  const creditRemaining = creditLimit - creditUsed;
  const usagePercentage = (creditUsed / creditLimit) * 100;

  const getProgressColor = () => {
    if (usagePercentage >= 80) return 'bg-red-500';
    if (usagePercentage >= 60) return 'bg-orange-500';
    return 'bg-green-500';
  };

  const getTitle = () => {
    switch (language) {
      case 'hi': return '‡§â‡§ß‡§æ‡§∞ ‡§ü‡•ç‡§∞‡•à‡§ï‡§∞';
      case 'bn': return '‡¶ã‡¶£ ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶∞';
      case 'mr': return '‡§â‡§ß‡§æ‡§∞ ‡§ü‡•ç‡§∞‡•Ö‡§ï‡§∞';
      case 'ta': return '‡Æï‡Æü‡Æ©‡Øç ‡Æü‡Æø‡Æ∞‡Ææ‡Æï‡Øç‡Æï‡Æ∞‡Øç';
      case 'te': return '‡∞∞‡±Å‡∞£ ‡∞ü‡±ç‡∞∞‡∞æ‡∞ï‡∞∞‡±ç';
      default: return 'Credit Tracker';
    }
  };

  const getUsageText = () => {
    switch (language) {
      case 'hi': return `‚Çπ${creditUsed.toFixed(0)} ‡§Æ‡•á‡§Ç ‡§∏‡•á ‚Çπ${creditLimit.toFixed(0)} ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ`;
      case 'bn': return `‚Çπ${creditLimit.toFixed(0)} ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‚Çπ${creditUsed.toFixed(0)} ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá`;
      case 'mr': return `‚Çπ${creditLimit.toFixed(0)} ‡§™‡•à‡§ï‡•Ä ‚Çπ${creditUsed.toFixed(0)} ‡§µ‡§æ‡§™‡§∞‡§≤‡•á`;
      case 'ta': return `‚Çπ${creditLimit.toFixed(0)} ‡Æá‡Æ≤‡Øç ‚Çπ${creditUsed.toFixed(0)} ‡Æ™‡ÆØ‡Æ©‡Øç‡Æ™‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ`;
      case 'te': return `‚Çπ${creditLimit.toFixed(0)} ‡∞≤‡±ã ‚Çπ${creditUsed.toFixed(0)} ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞Ç‡∞ö‡∞æ‡∞∞‡±Å`;
      default: return `‚Çπ${creditUsed.toFixed(0)} out of ‚Çπ${creditLimit.toFixed(0)} used`;
    }
  };

  const getRemainingText = () => {
    switch (language) {
      case 'hi': return `‚Çπ${creditRemaining.toFixed(0)} ‡§â‡§ß‡§æ‡§∞ ‡§¨‡§æ‡§ï‡•Ä ‡§π‡•à`;
      case 'bn': return `‚Çπ${creditRemaining.toFixed(0)} ‡¶ã‡¶£ ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶Ü‡¶õ‡ßá`;
      case 'mr': return `‚Çπ${creditRemaining.toFixed(0)} ‡§â‡§ß‡§æ‡§∞ ‡§∂‡§ø‡§≤‡•ç‡§≤‡§ï ‡§Ü‡§π‡•á`;
      case 'ta': return `‚Çπ${creditRemaining.toFixed(0)} ‡Æï‡Æü‡Æ©‡Øç ‡ÆÆ‡ØÄ‡Æ§‡ÆÆ‡Øç ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ`;
      case 'te': return `‚Çπ${creditRemaining.toFixed(0)} ‡∞∞‡±Å‡∞£‡∞Ç ‡∞Æ‡∞ø‡∞ó‡∞ø‡∞≤‡∞ø ‡∞â‡∞Ç‡∞¶‡∞ø`;
      default: return `‚Çπ${creditRemaining.toFixed(0)} credit remaining`;
    }
  };

  return (
    <>
      {/* High usage alert banner */}
      {usagePercentage >= 80 && (
        <Alert className="mb-4 border-red-200 bg-red-50">
          <AlertTriangle className="h-4 w-4 text-red-600" />
          <AlertDescription className="text-red-800">
            üîî {language === 'hi' 
              ? `‡§Ü‡§™ ‚Çπ${creditUsed.toFixed(0)} ‡§§‡§ï ‡§™‡§π‡•Å‡§Ç‡§ö ‡§ó‡§è ‡§π‡•ã, ‡§∏‡§Ç‡§≠‡§æ‡§≤ ‡§ï‡•á!` 
              : `You've used ‚Çπ${creditUsed.toFixed(0)}, be careful!`
            }
          </AlertDescription>
        </Alert>
      )}

      <Card className="border-blue-200 bg-gradient-to-r from-blue-50 to-indigo-50">
        <CardHeader className="pb-2">
          <CardTitle className="flex items-center text-lg">
            <CreditCard className="h-5 w-5 mr-2 text-blue-600" />
            {getTitle()}
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {/* Progress Bar */}
          <div className="space-y-2">
            <div className="flex justify-between text-sm">
              <span className="text-gray-600">{getUsageText()}</span>
              <span className="font-semibold text-gray-900">{usagePercentage.toFixed(1)}%</span>
            </div>
            <div className="relative">
              <Progress 
                value={usagePercentage} 
                className="h-3 bg-gray-200"
              />
              <div 
                className={`absolute top-0 left-0 h-3 rounded-full transition-all ${getProgressColor()}`}
                style={{ width: `${Math.min(usagePercentage, 100)}%` }}
              />
            </div>
          </div>

          {/* Remaining Credit */}
          <div className="bg-white rounded-lg p-3 border border-blue-200">
            <div className="text-center">
              <p className="text-sm text-gray-600 mb-1">
                {language === 'hi' ? '‡§¨‡§ö‡§æ ‡§π‡•Å‡§Ü ‡§â‡§ß‡§æ‡§∞' : 
                 language === 'bn' ? '‡¶Ö‡¶¨‡¶∂‡¶ø‡¶∑‡ßç‡¶ü ‡¶ã‡¶£' : 
                 language === 'mr' ? '‡§â‡§∞‡§≤‡•á‡§≤‡•á ‡§â‡§ß‡§æ‡§∞' :
                 language === 'ta' ? '‡ÆÆ‡ØÄ‡Æ§‡ÆÆ‡ØÅ‡Æ≥‡Øç‡Æ≥ ‡Æï‡Æü‡Æ©‡Øç' :
                 language === 'te' ? '‡∞Æ‡∞ø‡∞ó‡∞ø‡∞≤‡∞ø‡∞® ‡∞∞‡±Å‡∞£‡∞Ç' :
                 'Remaining Credit'}
              </p>
              <p className="text-2xl font-bold text-blue-600">
                ‚Çπ{creditRemaining.toFixed(0)}
              </p>
              <p className="text-sm text-gray-500 mt-1">
                {getRemainingText()}
              </p>
            </div>
          </div>

          {/* Offline indicator */}
          {!creditData && localCreditData && (
            <div className="text-xs text-orange-600 text-center">
              üì± {language === 'hi' ? '‡§ë‡§´‡§≤‡§æ‡§á‡§® ‡§°‡•á‡§ü‡§æ' : 'Offline data'}
            </div>
          )}
        </CardContent>
      </Card>
    </>
  );
}