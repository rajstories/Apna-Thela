import { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Dialog, DialogContent, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { useLanguage } from '@/hooks/use-language';
import { useSpeech } from '@/hooks/use-speech';
import { ArrowLeft, Send, Mic, ExternalLink } from 'lucide-react';

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
}

interface SupportChatProps {
  open: boolean;
  onClose: () => void;
  initialMessage?: string;
}

export function SupportChat({ open, onClose, initialMessage = '' }: SupportChatProps) {
  const { language } = useLanguage();
  const { startListening, isListening } = useSpeech();
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Initialize with welcome message and pre-fill input if provided
  useEffect(() => {
    if (open && messages.length === 0) {
      const welcomeMessage = language === 'hi' ? 
        'üëã ‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Ö‡§™‡§®‡§æ ‡§†‡•á‡§≤‡§æ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à‡•§ ‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§™‡•Ç‡§õ‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?' :
        'üëã Hello! Welcome to Apna Thela. What would you like to ask?';
      
      setMessages([{
        id: '1',
        text: welcomeMessage,
        isUser: false,
        timestamp: new Date()
      }]);
    }
    
    // Pre-fill input with initial message if provided
    if (open && initialMessage) {
      setInputText(initialMessage);
    }
  }, [open, language, initialMessage]);

  // Smart bot reply logic with enhanced responses
  const getBotReply = (userMessage: string): string => {
    const msg = userMessage.toLowerCase();
    const isHindi = language === 'hi' || /[‡§Ä-‡•ø]/.test(userMessage);

    // Registration help
    if (msg.includes('register') || msg.includes('‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡§∞') || msg.includes('‡§ï‡•à‡§∏‡•á register ‡§ï‡§∞‡•á‡§Ç') || msg.includes('sign up') || msg.includes('‡§∏‡§æ‡§á‡§® ‡§Ö‡§™')) {
      return isHindi ?
        'üìã ‡§Ü‡§™ ‡§π‡§Æ‡§æ‡§∞‡•á ‡§π‡•ã‡§Æ ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§® ‡§∏‡•á "Profile" ‡§¨‡§ü‡§® ‡§¶‡§¨‡§æ‡§ï‡§∞ ‡§Ü‡§∏‡§æ‡§®‡•Ä ‡§∏‡•á ‡§Ö‡§™‡§®‡§æ ‡§†‡•á‡§≤‡§æ ‡§ö‡§æ‡§≤‡•Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§´‡§º‡•ã‡§® ‡§®‡§Ç‡§¨‡§∞ ‡§°‡§æ‡§≤‡•á‡§Ç, OTP ‡§µ‡•á‡§∞‡§ø‡§´‡§æ‡§à ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§Ö‡§™‡§®‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≠‡§∞‡•á‡§Ç‡•§' :
        'üìã You can easily start your thela by clicking the "Profile" button on our home screen. Enter your phone number, verify OTP and fill your information.';
    }

    // Supplier rates inquiry
    if (msg.includes('supplier') || msg.includes('‡§∏‡§™‡•ç‡§≤‡§æ‡§Ø‡§∞') || msg.includes('rate') || msg.includes('‡§∞‡•á‡§ü') || msg.includes('price') || msg.includes('‡§ï‡•Ä‡§Æ‡§§')) {
      return isHindi ?
        'üí∞ ‡§∏‡§™‡•ç‡§≤‡§æ‡§Ø‡§∞ ‡§ï‡•á ‡§∞‡•á‡§ü ‡§¶‡•á‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è "Buy Ingredients" ‡§∏‡•á‡§ï‡•ç‡§∂‡§® ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§è‡§Ç‡•§ ‡§µ‡§π‡§æ‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§∏‡§≠‡•Ä ‡§∏‡§™‡•ç‡§≤‡§æ‡§Ø‡§∞ ‡§ï‡•Ä ‡§ï‡•Ä‡§Æ‡§§‡•á‡§Ç ‡§î‡§∞ ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§Æ‡§ø‡§≤‡•á‡§ó‡•Ä‡•§' :
        'üí∞ To check supplier rates, go to "Buy Ingredients" section. There you will find all supplier prices and contact information.';
    }

    // Delivery timing
    if (msg.includes('delivery') || msg.includes('‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä') || msg.includes('‡§ï‡§¨ ‡§π‡•ã‡§§‡•Ä ‡§π‡•à') || msg.includes('time') || msg.includes('‡§∏‡§Æ‡§Ø')) {
      return isHindi ?
        'üöö ‡§°‡§ø‡§≤‡•Ä‡§µ‡§∞‡•Ä ‡§Ü‡§Æ‡§§‡•å‡§∞ ‡§™‡§∞ ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡•á 24-48 ‡§ò‡§Ç‡§ü‡•á ‡§Æ‡•á‡§Ç ‡§π‡•ã ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à‡•§ ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§™‡•ç‡§≤‡§æ‡§Ø‡§∞ ‡§∏‡•á ‡§∏‡•Ä‡§ß‡•á ‡§¨‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§' :
        'üöö Delivery usually happens within 24-48 hours of order. For emergency orders, contact suppliers directly.';
    }

    // Payment methods
    if (msg.includes('payment') || msg.includes('‡§≠‡•Å‡§ó‡§§‡§æ‡§®') || msg.includes('pay') || msg.includes('upi') || msg.includes('money') || msg.includes('‡§™‡•à‡§∏‡§æ')) {
      return isHindi ?
        'üí≥ ‡§≠‡•Å‡§ó‡§§‡§æ‡§® UPI, ‡§ï‡•à‡§∂ ‡§Ø‡§æ ‡§ë‡§®‡§≤‡§æ‡§á‡§® ‡§∏‡•á ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§µ‡•â‡§≤‡•á‡§ü ‡§∏‡•á‡§ï‡•ç‡§∂‡§® ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§ï‡§∞ ‡§Ö‡§™‡§®‡•á ‡§ñ‡§∞‡•ç‡§ö ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§™‡•á‡§Æ‡•á‡§Ç‡§ü ‡§π‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä ‡§¶‡•á‡§ñ‡•á‡§Ç‡•§' :
        'üí≥ You can pay via UPI, cash or online. Go to wallet section to track your expenses and view payment history.';
    }

    // Stock management
    if (msg.includes('stock') || msg.includes('‡§∏‡•ç‡§ü‡•â‡§ï') || msg.includes('inventory') || msg.includes('‡§∏‡§Æ‡§æ‡§®') || msg.includes('‡§∏‡§æ‡§Æ‡§æ‡§®')) {
      return isHindi ? 
        'üßæ ‡§Ö‡§™‡§®‡§æ ‡§∏‡•ç‡§ü‡•â‡§ï "Manage Inventory" ‡§∏‡•á ‡§¶‡•á‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§ï‡§Æ ‡§∏‡•ç‡§ü‡•â‡§ï ‡§ï‡•Ä ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§≠‡•Ä ‡§Æ‡§ø‡§≤‡§§‡•Ä ‡§π‡•à‡•§ Voice Order ‡§≠‡•Ä ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§' :
        'üßæ You can view your stock from "Manage Inventory". You also get low stock alerts. Voice orders are also available.';
    }

    // General help
    if (msg.includes('help') || msg.includes('‡§Æ‡§¶‡§¶') || msg.includes('how') || msg.includes('‡§ï‡•à‡§∏‡•á') || msg.includes('use') || msg.includes('‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤')) {
      return isHindi ?
        'üì± ‡§ê‡§™ ‡§Æ‡•á‡§Ç 4 ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡•á‡§ï‡•ç‡§∂‡§® ‡§π‡•à‡§Ç: Buy Ingredients (‡§∏‡§æ‡§Æ‡§æ‡§® ‡§ñ‡§∞‡•Ä‡§¶‡•á‡§Ç), Manage Inventory (‡§∏‡•ç‡§ü‡•â‡§ï ‡§¶‡•á‡§ñ‡•á‡§Ç), Wallet (‡§™‡•à‡§∏‡•á ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡•á‡§Ç), Profile (‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤)‡•§ ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§∏‡§µ‡§æ‡§≤ ‡§π‡•ã ‡§§‡•ã ‡§™‡•Ç‡§õ‡§ø‡§è!' :
        'üì± App has 4 main sections: Buy Ingredients, Manage Inventory, Wallet, Profile. Ask me anything!';
    }

    // Default response
    return isHindi ?
      'üí¨ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§ï‡•ã‡§à ‡§ñ‡§æ‡§∏ ‡§∏‡§µ‡§æ‡§≤ ‡§π‡•à? ‡§®‡•Ä‡§ö‡•á ‡§¶‡§ø‡§è ‡§ó‡§è ‡§¨‡§ü‡§® ‡§≠‡•Ä ‡§¶‡§¨‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§' :
      'üí¨ I can help you. Any specific question? You can also click the buttons below.';
  };

  const sendMessage = (text: string) => {
    if (!text.trim()) return;

    // Add user message
    const userMessage: Message = {
      id: Date.now().toString(),
      text: text.trim(),
      isUser: true,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText('');

    // Show typing indicator
    setIsTyping(true);

    // Simulate bot response delay (1-2 seconds for realism)
    setTimeout(() => {
      const botReply: Message = {
        id: (Date.now() + 1).toString(),
        text: getBotReply(text),
        isUser: false,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, botReply]);
      setIsTyping(false);
    }, 1000 + Math.random() * 1000); // 1-2 second delay
  };

  const handleVoiceInput = () => {
    const voiceLanguage = language === 'hi' ? 'hi-IN' : 'en-US';
    
    startListening(voiceLanguage).then((transcript: string | null) => {
      if (!transcript) return;
      setInputText(transcript);
      
      // Show voice message indicator
      const voiceMessage: Message = {
        id: Date.now().toString(),
        text: 'üé§ (voice message sent)',
        isUser: true,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, voiceMessage]);
      
      // Auto-send after voice input
      setTimeout(() => {
        sendMessage(transcript);
      }, 500);
    }).catch(() => {
      // Handle error silently
    });
  };

  // Pre-defined questions
  const quickQuestions = language === 'hi' ? [
    '‡§ï‡•à‡§∏‡•á register ‡§ï‡§∞‡•á‡§Ç?',
    'Supplier ‡§ï‡•á rate ‡§ï‡•à‡§∏‡•á ‡§¶‡•á‡§ñ‡•á‡§Ç?',
    'Delivery ‡§ï‡§¨ ‡§π‡•ã‡§§‡•Ä ‡§π‡•à?',
    'Payment ‡§ï‡•à‡§∏‡•á ‡§ï‡§∞‡•á‡§Ç?'
  ] : [
    'How to register?',
    'How to check supplier rates?',
    'When is delivery?',
    'How to make payment?'
  ];

  const handleQuickQuestion = (question: string) => {
    sendMessage(question);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage(inputText);
    }
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('en-US', { 
      hour: '2-digit', 
      minute: '2-digit',
      hour12: false 
    });
  };

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="p-0 max-w-md h-[90vh] flex flex-col">
        <DialogTitle className="sr-only">
          {language === 'hi' ? '‡§Ö‡§™‡§®‡§æ ‡§†‡•á‡§≤‡§æ ‡§∏‡§™‡•ã‡§∞‡•ç‡§ü ‡§ö‡•à‡§ü' : 'Apna Thela Support Chat'}
        </DialogTitle>
        <DialogDescription className="sr-only">
          {language === 'hi' ? '‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§∏‡•á‡§µ‡§æ ‡§ö‡•à‡§ü ‡§á‡§Ç‡§ü‡§∞‡§´‡•á‡§∏' : 'Customer support chat interface'}
        </DialogDescription>
        {/* Header */}
        <div className="bg-green-600 text-white p-4 flex items-center space-x-3">
          <Button
            variant="ghost"
            size="sm"
            onClick={onClose}
            className="text-white hover:bg-green-700 p-2"
          >
            <ArrowLeft className="h-5 w-5" />
          </Button>
          <div className="flex-1">
            <h2 className="font-semibold">
              {language === 'hi' ? '‡§Ö‡§™‡§®‡§æ ‡§†‡•á‡§≤‡§æ ‡§∏‡§™‡•ã‡§∞‡•ç‡§ü' : 'Apna Thela Support'}
            </h2>
            <p className="text-xs opacity-90">
              {language === 'hi' ? '‡§ë‡§®‡§≤‡§æ‡§á‡§® ‚Ä¢ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§ú‡§µ‡§æ‡§¨' : 'Online ‚Ä¢ Instant replies'}
            </p>
          </div>
        </div>

        {/* Messages Area */}
        <div className="flex-1 overflow-y-auto p-4 space-y-3 bg-gray-50">
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                  message.isUser
                    ? 'bg-green-500 text-white rounded-br-none'
                    : 'bg-white text-gray-800 rounded-bl-none shadow-sm'
                }`}
              >
                <p className="text-sm">{message.text}</p>
                <p
                  className={`text-xs mt-1 ${
                    message.isUser ? 'text-green-100' : 'text-gray-500'
                  }`}
                >
                  {formatTime(message.timestamp)}
                </p>
              </div>
            </div>
          ))}

          {/* Typing indicator */}
          {isTyping && (
            <div className="flex justify-start">
              <div className="bg-white text-gray-800 rounded-lg rounded-bl-none shadow-sm px-4 py-2">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                </div>
              </div>
            </div>
          )}

          <div ref={messagesEndRef} />
        </div>

        {/* Quick Questions - Show only if no messages yet or just welcome message */}
        {messages.length <= 1 && (
          <div className="px-4 py-2 border-t bg-gray-50">
            <p className="text-xs text-gray-600 mb-2">
              {language === 'hi' ? '‡§Ü‡§Æ ‡§∏‡§µ‡§æ‡§≤:' : 'Common questions:'}
            </p>
            <div className="grid grid-cols-1 gap-2">
              {quickQuestions.map((question, index) => (
                <Button
                  key={index}
                  variant="outline"
                  size="sm"
                  onClick={() => handleQuickQuestion(question)}
                  className="text-xs text-left justify-start h-auto py-2 px-3 bg-white hover:bg-blue-50 border-blue-200"
                >
                  {question}
                </Button>
              ))}
            </div>
          </div>
        )}

        {/* WhatsApp Contact Banner */}
        <div className="bg-blue-50 border-t border-blue-200 p-3">
          <div className="flex items-center justify-between">
            <p className="text-xs text-blue-700">
              {language === 'hi' ? 
                '‡§µ‡•ç‡§π‡§æ‡§ü‡•ç‡§∏‡§ê‡§™ ‡§™‡§∞ ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§Æ‡§¶‡§¶ ‡§™‡§æ‡§è‡§Ç:' : 
                'Get instant help on WhatsApp:'
              }
            </p>
            <Button
              size="sm"
              onClick={() => window.open('https://wa.me/919958262272?text=Namaste%20team%2C%20mujhe%20madad%20chahiye', '_blank')}
              className="bg-green-600 hover:bg-green-700 text-xs"
            >
              <ExternalLink className="w-3 h-3 mr-1" />
              {language === 'hi' ? '‡§ö‡•à‡§ü ‡§ï‡§∞‡•á‡§Ç' : 'Chat'}
            </Button>
          </div>
        </div>

        {/* Input Area */}
        <div className="border-t bg-white p-4">
          <div className="flex items-center space-x-2">
            <div className="flex-1 relative">
              <Input
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder={language === 'hi' ? '‡§Æ‡•à‡§∏‡•á‡§ú ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç...' : 'Type a message...'}
                className="pr-10"
              />
              <Button
                onClick={handleVoiceInput}
                disabled={isListening}
                variant="ghost"
                size="sm"
                className="absolute right-1 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-green-600"
              >
                <Mic className={`w-4 h-4 ${isListening ? 'animate-pulse text-red-500' : ''}`} />
              </Button>
            </div>
            <Button
              onClick={() => sendMessage(inputText)}
              disabled={!inputText.trim()}
              className="bg-green-600 hover:bg-green-700"
              size="sm"
            >
              <Send className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}