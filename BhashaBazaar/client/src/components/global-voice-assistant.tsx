import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { useLanguage } from '@/hooks/use-language';
import { useSpeech } from '@/hooks/use-speech';
import { Mic, MicOff } from 'lucide-react';
import { useLocation } from 'wouter';
import nlp from 'compromise';

export function GlobalVoiceAssistant() {
  const [isListening, setIsListening] = useState(false);
  const [, navigate] = useLocation();
  const { language, setLanguage } = useLanguage();
  const { startListening, isSupported } = useSpeech();
  const { toast } = useToast();

  // Auto-detect language and store in localStorage
  const detectAndSetLanguage = (transcript: string) => {
    const lowerText = transcript.toLowerCase();
    
    // Language detection patterns
    if (/[‡§Ü-‡§π]/.test(transcript) || lowerText.includes('‡§®‡§Æ‡§∏‡•ç‡§§‡•á') || lowerText.includes('‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶')) {
      setLanguage('hi');
      localStorage.setItem('detectedLanguage', 'hi');
      return 'hi';
    } else if (/[‡¶ï-‡¶π]/.test(transcript) || lowerText.includes('‡¶®‡¶Æ‡¶∏‡ßç‡¶ï‡¶æ‡¶∞') || lowerText.includes('‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶')) {
      setLanguage('bn');
      localStorage.setItem('detectedLanguage', 'bn');
      return 'bn';
    } else if (/[‡§ï-‡§π]/.test(transcript) || lowerText.includes('‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞') || lowerText.includes('‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶')) {
      setLanguage('mr');
      localStorage.setItem('detectedLanguage', 'mr');
      return 'mr';
    } else if (/[‡ÆÖ-‡Æπ]/.test(transcript) || lowerText.includes('‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç') || lowerText.includes('‡Æ®‡Æ©‡Øç‡Æ±‡Æø')) {
      setLanguage('ta');
      localStorage.setItem('detectedLanguage', 'ta');
      return 'ta';
    } else if (/[‡∞Ö-‡∞π]/.test(transcript) || lowerText.includes('‡∞®‡∞Æ‡∞∏‡±ç‡∞ï‡∞æ‡∞∞‡∞Ç') || lowerText.includes('‡∞ß‡∞®‡±ç‡∞Ø‡∞µ‡∞æ‡∞¶‡∞æ‡∞≤‡±Å')) {
      setLanguage('te');
      localStorage.setItem('detectedLanguage', 'te');
      return 'te';
    } else {
      setLanguage('en');
      localStorage.setItem('detectedLanguage', 'en');
      return 'en';
    }
  };

  // Process voice commands with NLP
  const processVoiceCommand = (transcript: string) => {
    const detectedLang = detectAndSetLanguage(transcript);
    const lowerText = transcript.toLowerCase();
    
    // Use compromise.js for basic NLP
    const doc = nlp(lowerText);
    const verbs = doc.verbs().text();
    const nouns = doc.nouns().text();

    // Command patterns for different languages
    const commandPatterns = {
      // Navigation commands
      order: /\b(order|‡§ë‡§∞‡•ç‡§°‡§∞|‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞|‡§ë‡§∞‡•ç‡§°‡§∞|‡ÆÜ‡Æ∞‡Øç‡Æü‡Æ∞‡Øç|‡∞Ü‡∞∞‡±ç‡∞°‡∞∞‡±ç|buy|‡§ñ‡§∞‡•Ä‡§¶|‡¶ï‡¶ø‡¶®|‡§ñ‡§∞‡•á‡§¶‡•Ä|‡Æµ‡Ææ‡Æô‡Øç‡Æï‡ØÅ|‡∞ï‡±ä‡∞®‡±Å)\b/i,
      stock: /\b(stock|‡§∏‡•ç‡§ü‡•â‡§ï|‡¶∏‡ßç‡¶ü‡¶ï|‡§∏‡•ç‡§ü‡•â‡§ï|‡Æ∏‡Øç‡Æü‡Ææ‡Æï‡Øç|‡∞∏‡±ç‡∞ü‡∞æ‡∞ï‡±ç|inventory|‡§á‡§®‡•ç‡§µ‡•á‡§Ç‡§ü‡§∞‡•Ä|‡¶á‡¶®‡¶≠‡ßá‡¶®‡ßç‡¶ü‡¶∞‡¶ø|‡§á‡§®‡•ç‡§µ‡•ç‡§π‡•á‡§Ç‡§ü‡§∞‡•Ä|‡Æá‡Æ©‡Øç‡Æµ‡ØÜ‡Æ©‡Øç‡Æü‡Æ∞‡Æø|‡∞á‡∞®‡±ç‡∞µ‡±Ü‡∞Ç‡∞ü‡∞∞‡±Ä)\b/i,
      wallet: /\b(wallet|‡§µ‡•â‡§≤‡•á‡§ü|‡¶ì‡¶Ø‡¶º‡¶æ‡¶≤‡ßá‡¶ü|‡§µ‡•â‡§≤‡•á‡§ü|‡Æµ‡Ææ‡Æ≤‡ØÜ‡Æü‡Øç|‡∞µ‡∞æ‡∞≤‡±Ü‡∞ü‡±ç|money|‡§™‡•à‡§∏‡§æ|‡¶ü‡¶æ‡¶ï‡¶æ|‡§™‡•à‡§∏‡•á|‡Æ™‡Æ£‡ÆÆ‡Øç|‡∞°‡∞¨‡±ç‡∞¨‡±Å)\b/i,
      marketplace: /\b(market|‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü|‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞|‡§¨‡§æ‡§ú‡§æ‡§∞|‡Æö‡Æ®‡Øç‡Æ§‡Øà|‡∞Æ‡∞æ‡∞∞‡±ç‡∞ï‡±Ü‡∞ü‡±ç|supplier|‡§∏‡§™‡•ç‡§≤‡§æ‡§Ø‡§∞|‡¶∏‡¶∞‡¶¨‡¶∞‡¶æ‡¶π‡¶ï‡¶æ‡¶∞‡ßÄ|‡§™‡•Å‡§∞‡§µ‡§†‡§æ‡§¶‡§æ‡§∞|‡Æö‡Æ™‡Øç‡Æ≥‡Øà‡ÆØ‡Æ∞‡±ç|‡∞∏‡∞∞‡∞´‡∞∞‡∞æ‡∞¶‡∞æ‡∞∞‡±Å)\b/i,
      profile: /\b(profile|‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤|‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤|‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤|‡∞™‡±ç‡∞∞‡±ä‡∞´‡±à‡∞≤‡±ç|account|‡§Ö‡§ï‡§æ‡§â‡§Ç‡§ü|‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü|‡§ñ‡§æ‡§§‡•á|‡Æï‡Æ£‡Æï‡Øç‡Æï‡ØÅ|‡∞ñ‡∞æ‡∞§‡∞æ)\b/i,
    };

    // Product matching
    const productPatterns = {
      aloo: /\b(aloo|‡§Ü‡§≤‡•Ç|‡¶Ü‡¶≤‡ßÅ|‡§¨‡§ü‡§æ‡§ü‡•á|‡Æâ‡Æ∞‡ØÅ‡Æ≥‡Øà‡Æï‡Øç‡Æï‡Æø‡Æ¥‡Æô‡Øç‡Æï‡ØÅ|‡∞¨‡∞Ç‡∞ó‡∞æ‡∞≥‡∞æ‡∞¶‡±Å‡∞Ç‡∞™|potato)\b/i,
      pyaz: /\b(pyaz|‡§™‡•ç‡§Ø‡§æ‡§ú|‡¶™‡ßá‡¶Å‡¶Ø‡¶º‡¶æ‡¶ú|‡§ï‡§æ‡§Ç‡§¶‡§æ|‡Æµ‡ØÜ‡Æô‡Øç‡Æï‡Ææ‡ÆØ‡ÆÆ‡±ç|‡∞â‡∞≤‡±ç‡∞≤‡∞ø‡∞™‡∞æ‡∞Ø|onion)\b/i,
      tamatar: /\b(tamatar|‡§ü‡§Æ‡§æ‡§ü‡§∞|‡¶ü‡¶Æ‡ßá‡¶ü‡ßã|‡§ü‡•ã‡§Æ‡•Ö‡§ü‡•ã|‡Æ§‡Æï‡Øç‡Æï‡Ææ‡Æ≥‡Æø|‡∞ü‡∞Æ‡∞æ‡∞ü‡∞æ|tomato)\b/i,
      oil: /\b(oil|‡§§‡•á‡§≤|‡¶§‡ßá‡¶≤|‡§§‡•á‡§≤|‡Æé‡Æ£‡Øç‡Æ£‡ØÜ‡ÆØ‡±ç|‡∞®‡±Ç‡∞®‡±Ü)\b/i,
    };

    // Execute commands
    if (commandPatterns.order.test(lowerText)) {
      // Check for specific products
      let productQuery = '';
      if (productPatterns.aloo.test(lowerText)) productQuery = '?search=aloo';
      else if (productPatterns.pyaz.test(lowerText)) productQuery = '?search=pyaz';
      else if (productPatterns.tamatar.test(lowerText)) productQuery = '?search=tamatar';
      else if (productPatterns.oil.test(lowerText)) productQuery = '?search=oil';

      navigate(`/buy-ingredients${productQuery}`);
      toast({
        title: getSuccessMessage(detectedLang, 'order'),
        description: getDescription(detectedLang, 'order', productQuery),
      });
    } else if (commandPatterns.stock.test(lowerText)) {
      navigate('/inventory');
      toast({
        title: getSuccessMessage(detectedLang, 'stock'),
        description: getDescription(detectedLang, 'stock'),
      });
    } else if (commandPatterns.wallet.test(lowerText)) {
      navigate('/wallet');
      toast({
        title: getSuccessMessage(detectedLang, 'wallet'),
        description: getDescription(detectedLang, 'wallet'),
      });
    } else if (commandPatterns.marketplace.test(lowerText)) {
      navigate('/marketplace');
      toast({
        title: getSuccessMessage(detectedLang, 'marketplace'),
        description: getDescription(detectedLang, 'marketplace'),
      });
    } else if (commandPatterns.profile.test(lowerText)) {
      navigate('/profile');
      toast({
        title: getSuccessMessage(detectedLang, 'profile'),
        description: getDescription(detectedLang, 'profile'),
      });
    } else {
      // Unknown command
      toast({
        title: getErrorMessage(detectedLang),
        description: getHelpMessage(detectedLang),
        variant: 'destructive',
      });
    }
  };

  const getSuccessMessage = (lang: string, action: string) => {
    const messages = {
      hi: {
        order: 'üõí ‡§ñ‡§∞‡•Ä‡§¶‡§æ‡§∞‡•Ä ‡§™‡•á‡§ú ‡§ñ‡•ã‡§≤‡§æ ‡§ó‡§Ø‡§æ',
        stock: 'üì¶ ‡§∏‡•ç‡§ü‡•â‡§ï ‡§™‡•á‡§ú ‡§ñ‡•ã‡§≤‡§æ ‡§ó‡§Ø‡§æ',
        wallet: 'üí≥ ‡§µ‡•â‡§≤‡•á‡§ü ‡§ñ‡•ã‡§≤‡§æ ‡§ó‡§Ø‡§æ',
        marketplace: 'üè™ ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü‡§™‡•ç‡§≤‡•á‡§∏ ‡§ñ‡•ã‡§≤‡§æ ‡§ó‡§Ø‡§æ',
        profile: 'üë§ ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§ñ‡•ã‡§≤‡§æ ‡§ó‡§Ø‡§æ',
      },
      bn: {
        order: 'üõí ‡¶ï‡ßá‡¶®‡¶æ‡¶ï‡¶æ‡¶ü‡¶æ ‡¶™‡ßÉ‡¶∑‡ßç‡¶†‡¶æ ‡¶ñ‡ßã‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá',
        stock: 'üì¶ ‡¶∏‡ßç‡¶ü‡¶ï ‡¶™‡ßÉ‡¶∑‡ßç‡¶†‡¶æ ‡¶ñ‡ßã‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá',
        wallet: 'üí≥ ‡¶ì‡¶Ø‡¶º‡¶æ‡¶≤‡ßá‡¶ü ‡¶ñ‡ßã‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá',
        marketplace: 'üè™ ‡¶Æ‡¶æ‡¶∞‡ßç‡¶ï‡ßá‡¶ü‡¶™‡ßç‡¶≤‡ßá‡¶∏ ‡¶ñ‡ßã‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá',
        profile: 'üë§ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶ñ‡ßã‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá',
      },
      en: {
        order: 'üõí Shopping page opened',
        stock: 'üì¶ Inventory page opened',
        wallet: 'üí≥ Wallet opened',
        marketplace: 'üè™ Marketplace opened',
        profile: 'üë§ Profile opened',
      },
    };
    return messages[lang]?.[action] || messages.en[action];
  };

  const getDescription = (lang: string, action: string, extra?: string) => {
    const descriptions = {
      hi: {
        order: extra ? '‡§™‡•ç‡§∞‡•ã‡§°‡§ï‡•ç‡§ü ‡§ñ‡•ã‡§ú‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§§‡•à‡§Ø‡§æ‡§∞' : '‡§∏‡§≠‡•Ä ‡§™‡•ç‡§∞‡•ã‡§°‡§ï‡•ç‡§ü‡•ç‡§∏ ‡§¶‡•á‡§ñ‡•á‡§Ç',
        stock: '‡§Ö‡§™‡§®‡§æ ‡§á‡§®‡•ç‡§µ‡•á‡§Ç‡§ü‡§∞‡•Ä ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç',
        wallet: '‡§™‡•à‡§∏‡•ã‡§Ç ‡§ï‡§æ ‡§π‡§ø‡§∏‡§æ‡§¨ ‡§¶‡•á‡§ñ‡•á‡§Ç',
        marketplace: '‡§∏‡§™‡•ç‡§≤‡§æ‡§Ø‡§∞‡•ç‡§∏ ‡§ñ‡•ã‡§ú‡•á‡§Ç',
        profile: '‡§Ö‡§™‡§®‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§ñ‡•á‡§Ç',
      },
      bn: {
        order: extra ? '‡¶™‡¶£‡ßç‡¶Ø ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§' : '‡¶∏‡¶¨ ‡¶™‡¶£‡ßç‡¶Ø ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®',
        stock: '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶®‡¶≠‡ßá‡¶®‡ßç‡¶ü‡¶∞‡¶ø ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®',
        wallet: '‡¶ü‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®',
        marketplace: '‡¶∏‡¶∞‡¶¨‡¶∞‡¶æ‡¶π‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®',
        profile: '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®',
      },
      en: {
        order: extra ? 'Ready to search products' : 'View all products',
        stock: 'Check your inventory',
        wallet: 'View money details',
        marketplace: 'Find suppliers',
        profile: 'View your information',
      },
    };
    return descriptions[lang]?.[action] || descriptions.en[action];
  };

  const getErrorMessage = (lang: string) => {
    const messages = {
      hi: '‚ùì ‡§∏‡§Æ‡§ù ‡§®‡§π‡•Ä‡§Ç ‡§Ü‡§Ø‡§æ',
      bn: '‚ùì ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶≤‡¶æ‡¶Æ ‡¶®‡¶æ',
      en: '‚ùì Didn\'t understand',
    };
    return messages[lang] || messages.en;
  };

  const getHelpMessage = (lang: string) => {
    const messages = {
      hi: '"‡§ë‡§∞‡•ç‡§°‡§∞ ‡§Ü‡§≤‡•Ç", "‡§∏‡•ç‡§ü‡•â‡§ï ‡§ö‡•á‡§ï", "‡§µ‡•â‡§≤‡•á‡§ü ‡§ñ‡•ã‡§≤‡•ã" ‡§ú‡•à‡§∏‡•á ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§¨‡•ã‡§≤‡•á‡§Ç',
      bn: '"‡¶Ö‡¶∞‡ßç‡¶°‡¶æ‡¶∞ ‡¶Ü‡¶≤‡ßÅ", "‡¶∏‡ßç‡¶ü‡¶ï ‡¶ö‡ßá‡¶ï", "‡¶ì‡¶Ø‡¶º‡¶æ‡¶≤‡ßá‡¶ü ‡¶ñ‡ßã‡¶≤‡ßã" ‡¶è‡¶∞‡¶ï‡¶Æ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡¶≤‡ßÅ‡¶®',
      en: 'Try commands like "Order aloo", "Check stock", "Open wallet"',
    };
    return messages[lang] || messages.en;
  };

  const handleVoiceInput = async () => {
    if (!isSupported) {
      toast({
        title: language === 'hi' ? '‡§è‡§∞‡§∞' : 'Error',
        description: language === 'hi' ? '‡§µ‡•â‡§Ø‡§∏ ‡§á‡§®‡§™‡•Å‡§ü ‡§∏‡§™‡•ã‡§∞‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à' : 'Voice input not supported',
        variant: 'destructive',
      });
      return;
    }

    setIsListening(true);
    
    try {
      const transcript = await startListening(language);
      if (transcript && transcript.trim().length > 0) {
        processVoiceCommand(transcript);
      }
    } catch (error) {
      toast({
        title: language === 'hi' ? '‡§è‡§∞‡§∞' : 'Error',
        description: language === 'hi' ? '‡§µ‡•â‡§Ø‡§∏ ‡§á‡§®‡§™‡•Å‡§ü ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ' : 'Voice input failed',
        variant: 'destructive',
      });
    } finally {
      setIsListening(false);
    }
  };

  // Load saved language on mount
  useEffect(() => {
    const savedLanguage = localStorage.getItem('detectedLanguage');
    if (savedLanguage && savedLanguage !== language) {
      setLanguage(savedLanguage);
    }
  }, [language, setLanguage]);

  return (
    <div className="fixed bottom-6 right-6 z-50">
      <Button
        onClick={handleVoiceInput}
        disabled={!isSupported || isListening}
        className={`w-14 h-14 rounded-full shadow-lg transition-all ${
          isListening 
            ? 'bg-red-500 hover:bg-red-600 animate-pulse' 
            : 'bg-blue-500 hover:bg-blue-600'
        }`}
        size="lg"
      >
        {isListening ? (
          <MicOff className="h-6 w-6 text-white" />
        ) : (
          <Mic className="h-6 w-6 text-white" />
        )}
      </Button>
    </div>
  );
}